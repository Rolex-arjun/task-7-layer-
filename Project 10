//here the banking application contains the transactions and other information based on databases etc..so I am giving the basic information about all these 7 layers
//API endpoints(contains allthe buttons)
const express = require('express');
const app = express();
const bodyParser = require('body-parser');
const authController = require('./controllers/authController');
const transactionController = require('./controllers/transactionController');
const authMiddleware = require('./middlewares/authMiddleware');

app.use(bodyParser.json());

// API Endpoints
app.post('/signup', authController.signup);
app.post('/login', authController.login);
app.post('/logout', authMiddleware, authController.logout);
app.post('/transaction', authMiddleware, transactionController.performTransaction);
app.get('/account', authMiddleware, transactionController.getAccountDetails);

// Server Listen
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});




//Business logic
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
const User = require('../models/User');
const Transaction = require('../models/Transaction');

class AuthService {
  async signup(userData) {
    const hashedPassword = await bcrypt.hash(userData.password, 10);
    const user = new User({ ...userData, password: hashedPassword });
    return await user.save();
  }

  async login({ email, password }) {
    const user = await User.findOne({ email });
    if (!user || !(await bcrypt.compare(password, user.password))) {
      throw new Error('Invalid credentials');
    }
    const token = jwt.sign({ userId: user._id }, process.env.JWT_SECRET, { expiresIn: '1h' });
    return { token, user };
  }

  async logout(token) {
    // Handle token invalidation logic here (e.g., blacklist)
    return { message: 'Logged out successfully' };
  }
}

class TransactionService {
  async performTransaction(userId, transactionDetails) {
    const user = await User.findById(userId);
    // Business logic for transaction (e.g., checking balance, updating records)
    const transaction = new Transaction({ ...transactionDetails, userId });
    return await transaction.save();
  }

  async getAccountDetails(userId) {
    const user = await User.findById(userId).populate('transactions');
    return { balance: user.balance, transactions: user.transactions };
  }
}




//Request Handling
const { AuthService } = require('../services/authService');
const authService = new AuthService();

const signup = async (req, res) => {
  try {
    const user = await authService.signup(req.body);
    res.status(201).json(user);
  } catch (error) {
    res.status(400).json({ error: error.message });
  }
};

const login = async (req, res) => {
  try {
    const { token, user } = await authService.login(req.body);
    res.status(200).json({ token, user });
  } catch (error) {
    res.status(400).json({ error: error.message });
  }
};

const logout = async (req, res) => {
  try {
    await authService.logout(req.token);
    res.status(200).json({ message: 'Logged out successfully' });
  } catch (error) {
    res.status(400).json({ error: error.message });
  }
};

module.exports = { signup, login, logout };



//Database models
const mongoose = require('mongoose');

const userSchema = new mongoose.Schema({
  email: { type: String, unique: true, required: true },
  password: { type: String, required: true },
  balance: { type: Number, default: 0 },
  transactions: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Transaction' }]
});

const User = mongoose.model('User', userSchema);
module.exports = User;
//Transaction models
const mongoose = require('mongoose');

const transactionSchema = new mongoose.Schema({
  userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
  amount: { type: Number, required: true },
  transactionType: { type: String, enum: ['deposit', 'withdrawal'], required: true },
  date: { type: Date, default: Date.now }
});

const Transaction = mongoose.model('Transaction', transactionSchema);
module.exports = Transaction;


//External Systems
// This layer could include integration with payment gateways, email/SMS notifications, etc.
const sendNotification = (message) => {
  // Integration with email/SMS service
  console.log(`Notification sent: ${message}`);
};

module.exports = { sendNotification };
//Logging and monitoring layer
const winston = require('winston');

// Logger setup
const logger = winston.createLogger({
  level: 'info',
  format: winston.format.json(),
  transports: [
    new winston.transports.File({ filename: 'error.log', level: 'error' }),
    new winston.transports.File({ filename: 'combined.log' })
  ]
});

if (process.env.NODE_ENV !== 'production') {
  logger.add(new winston.transports.Console({ format: winston.format.simple() }));
}

// Example log
logger.info('User login attempted');

module.exports = logger;



//environment variables
PORT=3000
